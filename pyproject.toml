[tool.poetry]
# See for more information on the metadata:
#   https://python-poetry.org/docs/pyproject/
# The version entry must be present, however it is further ignored by the build
# process; the version is automatically set by using ``poetry-dynamic-versioning``.
name = "pydantic-shapely"
version = "1.0.0a1"
description = "Letting two great packages work together!"
authors = ["Peter van Tol <peter.van.tol@witteveenbos.com>"]
license = "MIT"
readme = "README.rst"
packages = [{from = "src", include = "pydantic_shapely"}]

# Webpages
repository = "https://github.com/Peter-van-Tol/pydantic-shapely"
#documentation = "https://python-poetry.org/docs/"

# Classifiers, see https://pypi.org/classifiers/ for available trove classifiers
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering :: GIS",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.urls]
# Additional webpages can be listed here
# "Bug Tracker" = "https://github.com/python-poetry/poetry/issues"

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
pydantic = "2.5.3"
shapely = ">=2.0"
numpy = [
    { version="1.26.4", python = ">=3.12" },
    { version="1.24.4", python = ">=3.10,<3.12" },
    { version="1.21.1", python = "<3.10" }
]
setuptools = [
    { version="^70.1.0", markers="python_version >= '3.10'" },
]
typing-extensions = [
    { version="^4.12.2", python = "<3.10" }
]

[tool.poetry.group.dev.dependencies]
poetry-dynamic-versioning = "^0.21.3"
pylint = { version="^2.15.10", markers = "python_version >= '3.7.2'" }
pre-commit = "^2.21.0"
pytest = "7.2.1"
black = { version="^24.4.2", markers = "python_version >= '3.8'" }
isort = { version="^5.13.2", markers = "python_version >= '3.8'" }
fastapi = { version="^0.111.0", markers = "python_version >= '3.8'" }
pytest-cov = "^5.0.0"

[tool.poetry.group.docs.dependencies]
sphinx = { version="^7.3.7", markers = "python_version >= '3.9'" }
sphinx-rtd-theme = { version="^2.0.0", markers = "python_version >= '3.9'" }
dunamai = { version="^1.16.0", markers = "python_version >= '3.9'" }

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry-dynamic-versioning]
# This section contains all the configuration for the tool `poetry-dynamic-versioning`
# This tool can automatically set the version based on an commit tag. See for
# more options:
#   https://pypi.org/project/poetry-dynamic-versioning/
enable = true

[tool.isort]
# This section contains all the configuration for the tool `isort`. This tool
# can sort all import statements for you. See for documentation of thiss tool:
#   https://pycqa.github.io/isort/index.html
profile = "black"

[tool.black]
# This section contains all the configuration for the tool "black`. This tool
# can reformat the code according to PEP 8. For more information, see:
#   https://black.readthedocs.io/en/stable/the_black_code_style/index.html
# **PRO-TIP**: If youâ€™re asking yourself "Do I need to configure anything?" the
# answer is "No". Black is all about sensible defaults. Applying those defaults
# will have your code in compliance with many other Black formatted projects.
# Example:
# line-length = 100

[tool.pytest.ini_options]
# This section contains all the configuration for the tool `pytest`. This tool
# will run the tests for you. Use the follwoing command to get a list of all
# available commands:
#   poetry run pytest -h
# Specify command line options as you would do when invoking pytest directly.
minversion = "6.0"
addopts = "-ra -q"
norecursedirs = [
    "dist",
    "build",
]
testpaths = [
    "tests",
]
# Use pytest markers to select/deselect specific tests
# markers = [
#     "slow",   # mark tests as slow (deselect with "-m "not slow"")
#     "system", # mark end-to-end system tests
# ]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
